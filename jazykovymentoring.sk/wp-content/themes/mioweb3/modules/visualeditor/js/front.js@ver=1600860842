jQuery(function ($) {

	$('.background_video iframe').mwBackgroundVideo();
	$('.open_video_lightbox').mwVideoPopup();
	$('.open_element_lightbox').mwElementPopup();
	$('.open_mw_popup').mwPopup();

	mw_init_contact_form('.ve_contact_form');
	mw_init_form('.ve_check_form');


	$(window).bind('scroll', function (e) {
		setParallaxScroll();
	});
	setParallaxScroll();


	setFixedHeader();

	// delay show
	$(".element_container_delay, .row_container_delay").each(function () {
		var el = this;
		setTimeout(function () {
			$(el).fadeIn("slow");
		}, $(el).attr('data-delay') * 1000);
	});

	/* ********************* Scroll  ******************** */

	$('.mw_scroll_tonext').live('click', function () {
		$('html,body').animate({
			scrollTop: ($(this).offset().top + 66)
		}, 1000);
		return false;
	});

	/* ********************* Tabulators  ******************** */
	$(".mw_tabs a").live('click', function () {
		var target = $(this).attr('href');
		var group = $(this).attr('data-group');
		$(".mw_tabs_" + group + " a").removeClass("active");
		$(this).addClass("active");
		$("." + group + "_container > li").hide();
		$(target).show();
		return false;
	});

	/* ********************* Toggle target ******************** */
	$('.mw_toggle_container').live('click', function (event) {
		var $this = $(this);
		var tar = $this.attr('data-target');
		if ($this.is('input[type=checkbox]')) {
			var checked = $this.prop('checked');
			if (checked)
				$('#' + tar).show();
			else
				$('#' + tar).hide();
		} else {
			$('#' + tar).toggle();
		}
	});


});

function mw_init_contact_form(target) {
	jQuery(target).mwForm({
		onsubmit: function (self, $form) {
			var form = $form.serialize();
			var loading = self.$el.find("button span.loading");
			loading.show();
			jQuery.post(ajaxurl, 'action=ve_send_contact_form&' + form, function (data) {

				self.showMessage(data);
				loading.hide();

			}).fail(function () {

				self.showMessage({'sended': 'error', 'message': front_texts.nosended});
				loading.hide();

			});
		}
	});
}

function mw_init_form(target) {
	jQuery(target).mwForm();
}

function mw_load_added_ss_form(target, content) {
	var $target = jQuery(target);

	var old = window.document.write;
	window.document.write = function (html) {
		$target.html(html);
		window.document.write = old;
	}

	$target.html(content);
}

function mw_load_added_script(target, url, html='') {
	var $target = jQuery(target);

	if(html)
		$target.html(html);

	var script = document.createElement("script");
	script.async = true;
	script.src = url;
	$target.append(script);
}

function mw_load_added_fapi_form(target, but_class, content, clientDetails) {
	var $target = jQuery(target);

	var old = window.document.write;
	window.document.write = function (html) {
		$target.html(html);
		window.document.write = old;
		if (clientDetails && clientDetails != 'null') {
			clientDetails = jQuery.parseJSON(clientDetails);
			var $form = jQuery("#frm-showUserForm");
			var inputNames = ["name", "surname", "email", "mobil", "street", "city", "postcode", "company", "ic", "dic"];
			for (var i in inputNames) {
				var name = inputNames[i];
				var value = clientDetails[name];
				if (value !== undefined) {
					$form.find("[name=" + name + "]").val(value);
				}
			}
		}
		$target.find("#frm-submit").addClass(but_class);
	}

	$target.html(content);

	// Remove possibly loaded Fapi scripts because Fapi will load them again in it's internal initialization
	var fapiInternalScripts = ['https://form.fapi.cz/js/jQueryFapi.js', 'https://form.fapi.cz/js/netteFormsFapi.js'];
	jQuery('script').each(function () {
		if (fapiInternalScripts.indexOf(this.src) !== -1) {
			this.parentNode.removeChild(this);
		}
	});
}

function mw_load_fapi_form(target, but_class, clientDetails) {
	var $target = jQuery(target);
	if (clientDetails && clientDetails != 'null') {
		clientDetails = jQuery.parseJSON(clientDetails);
		var $form = jQuery("#frm-showUserForm");
		var inputNames = ["name", "surname", "email", "mobil", "street", "city", "postcode", "company", "ic", "dic"];
		for (var i in inputNames) {
			var name = inputNames[i];
			var value = clientDetails[name];
			if (value !== undefined) {
				$form.find("[name=" + name + "]").val(value);
			}
		}
	}
	$target.find("#frm-submit").addClass(but_class);

}


/* ********************* Fixed header  ******************** */
function setFixedHeader() {
	if (jQuery('.ve_fixed_header').length) {
		var header_position = jQuery(".ve_fixed_header").offset();

		jQuery(window).scroll(function () {

			var header_height = jQuery('#header').height();
			if (jQuery('.ve_fixed_header').length === 0) header_height = 0;
			if (jQuery('.mw_transparent_header').length) header_height = 0;

			var scroll = jQuery(window).scrollTop();
			if (scroll > header_position.top) {
				jQuery(".ve_fixed_header").addClass("ve_fixed_header_scrolled");
				jQuery("header").css('marginBottom', header_height);
			} else {
				jQuery(".ve_fixed_header_scrolled").removeClass("ve_fixed_header_scrolled");
				jQuery("header").css('marginBottom', '0');
				//jQuery("header").height('auto');
			}
		});
	}
}

function setParallaxScroll() {
	if (jQuery('.background_parallax').length) {
		jQuery('.background_parallax').each(function () {
			var $el = jQuery(this);
			updateParallax($el);
		});
	}
}

function updateParallax($el) {

	var diff = jQuery(window).scrollTop() - $el.closest('.row').offset().top;
	var yPos = +(diff * 0.4);

	var coords = yPos + 'px';

	$el.css({
		backgroundPositionY: coords
	});
}


/* ********************* FAQ  ******************** */
function faqClick(element, cssid) {
	jQuery(element).toggleClass('ve_faq_question_open');
	jQuery(element).toggleClass('ve_faq_question_close');
	jQuery(element).next(cssid + " .ve_faq_answer").slideToggle();
}

// smooth link scroll

jQuery(function () {
	jQuery('.menu a[href*="#"]:not([href="#"]),.ve_content_button[href*="#"]:not([href="#"]),.element_image a[href*="#"]:not([href="#"]),.entry_content a[href*="#"]:not([href="#"]),.mw_feature_title_link[href*="#"],.mw_icon_text a[href*="#"]').on('click', function () {
		if (location.pathname.replace(/^\//, '') == this.pathname.replace(/^\//, '') && location.hostname == this.hostname) {
			var target = jQuery(this.hash);
			var fix_header_h = 0;
			fix_header_h = jQuery('.ve_fixed_header').height();
			target = target.length ? target : jQuery('[name=' + this.hash.slice(1) + ']');
			if (target.length) {
				jQuery('html,body').animate({
					scrollTop: (target.offset().top - fix_header_h)
				}, 1000);
				if (jQuery('#mobile_nav').is(':visible')) {
					jQuery('#header .header_nav_container').removeClass('open');
					jQuery('.mw_mobile_nav_close_overlay').remove();
					jQuery('body').removeClass('mobile_menu_opened');
				}
				return false;
			}
		}
	});
});


function initialize_google_maps() {
	jQuery('.mw_google_map_container').each(function () {
		var def_setting = {
			address: 'Praha',
			zoom: 12,
			scrollwheel: false,
		};

		var setting = JSON.parse(jQuery(this).attr('data-setting'));

		setting = jQuery.extend(def_setting, setting);

		initialize_google_map(jQuery(this).attr('id'), setting);

	});
}

function initialize_google_map(map_id, setting) {
	var address = setting.address;
	var geocoder = new google.maps.Geocoder();
	var map = new google.maps.Map(document.getElementById(map_id), {
		zoom: setting.zoom,
		scrollwheel: setting.scrollwheel,
		center: {lat: -25.363, lng: 131.044}
	});
	if (geocoder) {
		geocoder.geocode({
			'address': address
		}, function (results, status) {
			if (status == google.maps.GeocoderStatus.OK) {
				if (status != google.maps.GeocoderStatus.ZERO_RESULTS) {
					map.setCenter(results[0].geometry.location);

					var infowindow = new google.maps.InfoWindow({
						content: '<b>' + address + '</b>',
						size: new google.maps.Size(150, 50)
					});

					var marker = new google.maps.Marker({
						position: results[0].geometry.location,
						map: map,
						title: address
					});
					google.maps.event.addListener(marker, 'click', function () {
						infowindow.open(map, marker);
					});

				} else {
					jQuery('#' + map_id + '_error').show();
				}
			} else {
				jQuery('#' + map_id + '_error').show();
			}
		});
	}
	var mapdata = {
		map: map,
		adress: address
	};
	jQuery('#' + map_id).data('map', mapdata);
}

;(function (factory) {

	if (typeof define === 'function' && define.amd) {
		define(['jquery'], factory);
	} else if (typeof exports !== 'undefined') {
		module.exports = factory(require('jquery'));
	} else {
		factory(jQuery);
	}

})(function ($) {
	// background video
	var MwBackgroundVideo = (function (element) {

		function _MwBackgroundVideo(element) {

			this.$el = $(element);
			this.$el.hide();
			var self = this;

			$(element).load(function () {
				self.sizeTheVideo();
				self.$el.show();
			});
			$(window).resize(function () {
				self.sizeTheVideo();
				console.log('resize');
			});

		}

		return _MwBackgroundVideo;

	})();

	MwBackgroundVideo.prototype.sizeTheVideo = function () {

		var w = this.$el.closest('div').width();
		var h = this.$el.closest('div').height();

		if (w > (h / 9 * 16)) {
			this.$el.css({
				'width': w + 'px',
				'height': w / 16 * 9 + 'px',
				'margin-left': -w / 2 + 'px',
				'margin-top': -w / 32 * 9 + 'px'
			});
		} else {
			this.$el.css({
				'width': h / 9 * 16 + 'px',
				'height': h + 'px',
				'margin-left': -h / 9 * 8 + 'px',
				'margin-top': -h / 2 + 'px'
			});
		}

	}

	$.fn.mwBackgroundVideo = function (options) {
		return this.each(function (index, el) {
			el.MwBackgroundVideo = new MwBackgroundVideo(el, options);
		});
	};

	// background video
	var MwPopup = (function (element) {

		function _MwPopup(element) {

			this.$el = $(element);
			var self = this;

			this.$el.click(function () {
				var key = $(this).attr('data-id');
				var popup_width = $("#ve_popup_container_" + key).attr('data-width');
				var background = $("#ve_popup_container_" + key).attr('data-bg');

				$.colorbox({
					width: "90%",
					maxWidth: popup_width,
					inline: true,
					opacity: 0.8,
					className: "colorbox_nobackground",
					href: "#ve_popup_container_" + key,
					onComplete: function () {
						$(this).colorbox.resize();
						$("#ve_popup_container_" + key + ' .ve_content_button').click(function(){
							self.setCookie();
						});
					},
					onClosed: function () {
						self.setCookie();
					}
				});

				$("#cboxOverlay").css("background-color", background);

				return false;

			});
		}

		return _MwPopup;

	})();

	MwPopup.prototype.setCookie = function (data) {
		var delay = $("#ve_popup_container_" + key).attr('data-delay');

		var now = new Date();
		var time = now.getTime();
		var expireTime = time + 1000 * 3600 * delay * 24;
		now.setTime(expireTime);
		if (delay > 0) document.cookie = "ve_popup_" + key + "=1;expires=" + now.toGMTString() + "; path=/";
	}

	$.fn.mwPopup = function (options) {
		return this.each(function (index, el) {
			el.MwPopup = new MwPopup(el, options);
		});
	};

	// video popup
	var MwVideoPopup = (function (element) {

		function _MwVideoPopup(element) {

			this.$el = $(element);

			this.$video = $(this.$el.attr('data-open')).find('iframe');

			var video_url = this.$video.attr("src");
			if (!this.$el.attr('data-mw-href') && video_url) this.$el.attr('data-mw-href', video_url);
			this.$video.attr("src", "");

			var self = this;

			this.$el.colorbox({
				inline: true,
				href: self.$el.attr('data-open'),
				maxWidth: "90%",
				width: "800px",
				onClosed: function () {
					self.$video.attr("src", "");
				},
				onComplete: function () {
					self.$video.attr("src", self.$el.attr('data-mw-href'));
				}
			});

		}

		return _MwVideoPopup;

	})();

	$.fn.mwVideoPopup = function (options) {
		return this.each(function (index, el) {
			el.MwVideoPopup = new MwVideoPopup(el, options);
		});
	};

	// element popup
	var MwElementPopup = (function (element) {

		function _MwElementPopup(element) {
			this.$el = $(element);
			var self = this;

			this.$el.colorbox({
				inline: true,
				href: self.$el.attr('data-popup'),
				maxWidth: "90%",
				width: "600px",
			});

		}

		return _MwElementPopup;

	})();

	$.fn.mwElementPopup = function (options) {
		return this.each(function (index, el) {
			el.MwElementPopup = new MwElementPopup(el, options);
		});
	};

	// contact form
	var MwForm = (function (element) {

		function _MwForm(element, settings) {
			this.$el = $(element);

			this.defaults = {
				onsubmit: null,
			};
			this.settings = $.extend({}, this, this.defaults, settings);

			var self = this;

			if (this.$el.hasClass("ve_content_form_antispam")) {
				this.$el.attr('action', this.$el.attr('data-action'));
			}

			this.$el.submit(function (e) {
				var error = false;
				var err_class = "ve_error_form";

				self.$el.find(".ve_error_form").removeClass("ve_error_form");
				self.$el.find(".ve_form_checkbox_container_error").removeClass("ve_form_checkbox_container_error");
				self.$el.find(".ve_form_error_message").remove();

				self.$el.find(".ve_form_required").each(function () {

					if ($(this).hasClass('ve_form_checkbox')) {
						if (!$(this).is(':checked')) error = true;
					} else if ($(this).hasClass('ve_form_checkbox_container')) {

						if ($('input:checkbox:checked', this).length < 1) {
							error = true;
							err_class = "ve_form_checkbox_container_error";
						}

					} else if ($(this).hasClass('ve_form_radio_container')) {

						if ($('input:radio:checked', this).length < 1) {
							error = true;
							err_class = "ve_form_checkbox_container_error";
						}

					} else {
						if ($(this).val() == "") error = true;
					}

					if (error) {
						$(this).addClass(err_class);
						var err = $(this).attr('data-errorm');
						if (!err) err = front_texts.required;

						if ($(this).hasClass('ve_form_checkbox')) {
							$(this).closest('label').after('<div class="ve_form_error_message">' + err + '</p>');
						} else $(this).after('<div class="ve_form_error_message">' + err + '</p>');

						if (($(this).offset().top - 50) < $(window).scrollTop()) {
							$('html, body').animate({
								scrollTop: ($(this).offset().top - 50)
							}, 500);
						}

						return false;
					}
				});

				//check number
				if (!error) {
					self.$el.find(".ve_form_number").each(function () {
						var number = $.trim($(this).val());

						if (!$.isNumeric(number)) {
							$(this).addClass("ve_error_form");
							ret = false;
							alert(front_texts.wrongnumber);
							if (($(this).offset().top - 50) > $('body').offset().top) {
								$('html, body').animate({
									scrollTop: ($(this).offset().top - 50)
								}, 500);
							}
							return false;
						}
					});
				}

				if (!error) {
					var emailReg = /^([\w-+\.]+@([\w-]+\.)+[\w-]{2,6})?$/;
					self.$el.find(".ve_form_email").each(function () {
						var emailaddressVal = $(this).val().trim();
						$(this).val(emailaddressVal);
						if (!emailReg.test(emailaddressVal) || emailaddressVal == "") {
							$(this).addClass("ve_error_form");
							$(this).after('<div class="ve_form_error_message">' + front_texts.wrongemail + '</p>');
							if (($(this).offset().top - 50) > $('body').offset().top) {
								$('html, body').animate({
									scrollTop: ($(this).offset().top - 50)
								}, 500);
							}
							error = true;
						}
					});
				}

				if (error) {
					return false;
				}
				// contact form sending
				else {

					if (self.settings.onsubmit) {
						self.settings.onsubmit.call(this, self, $(this));
						return false;
					}

					if(self.$el.hasClass('mw_funnel_contact_conversion')) {
						var mail = self.$el.find(".ve_form_email").val();
						var funnel_id = self.$el.attr('data-funnel');
						$.ajax({
							type: 'POST',
							data: {"action": "mwSendMailConversion", "contact": mail, "funnel_id": funnel_id},
							url: ajaxurl,
							success: function (content) {
								self.$el.unbind("submit");
								self.$el.submit();
								//console.log(content);
							}
						});
						return false;
					}
				}


			});

			this.$el.find(".ve_error_form").live("click", function () {
				$(this).removeClass("ve_error_form");
				$(this).closest('.ve_form_row').find('.ve_form_error_message').remove();
			});
			this.$el.find(".ve_form_message").click(function () {
				self.closeMessage();
			});

		}

		return _MwForm;

	})();

	MwForm.prototype.showMessage = function (data) {
		this.$el.find('.ve_form_message span').html(data.message);
		this.$el.find('.ve_form_message').removeClass('ve_form_message_error ve_form_message_ok').addClass('ve_form_message_' + data.sended).fadeIn(200);
		if (data.sended == 'ok') {
			this.clearForm();
		}
	}

	MwForm.prototype.closeMessage = function () {
		this.$el.find('.ve_form_message').fadeOut(200, function () {
			$(this).find('span').html('');
			$(this).removeClass('ve_form_message_error ve_form_message_ok');
		});
	}
	MwForm.prototype.clearForm = function () {
		this.$el.find(".ve_form_row input").each(function () {
			$(this).val("");
		});
		this.$el.find(".ve_form_row textarea").val('');
	}

	$.fn.mwForm = function (options) {
		return this.each(function (index, el) {
			el.MwForm = new MwForm(el, options);
		});
	};

});
